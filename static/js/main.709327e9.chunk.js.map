{"version":3,"sources":["Components/Card/card.component.jsx","Components/CardList/card-list.Component.jsx","Components/search-box/search-box.jsx","App.js","serviceWorker.js","index.js"],"names":["pTagFontColor","color","fontSize","display","background","opacity","Card","props","className","src","brewery","image_url","alt","name","tagline","style","backgroundImage","fontFamily","abv","ibu","target_og","target_fg","CardList","beers","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","componentDidMount","getBeerPage","componentDidUpdate","prevProps","prevState","beerPage","state","fetch","then","response","json","setState","searchField","this","filteredBeers","filter","toLowerCase","includes","onClick","e","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gUAGMA,G,YAAgB,CACpBC,MAAO,QACPC,SAAU,OACVC,QAAS,OAETC,WAAY,2DAGZC,QAAS,OAGEC,EAAO,SAACC,GAAD,OAiBlB,yBAAKC,UAAU,QAEb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,yBACEA,UAAU,SAOV,yBAAKA,UAAU,SACb,yBAAKA,UAAU,WAAWC,IAAKF,EAAMG,QAAQC,UAAWC,IAAI,KAC5D,2BAAIL,EAAMG,QAAQG,MAClB,2BAAIN,EAAMG,QAAQI,WAGtB,yBACEN,UAAU,OACVO,MAAO,CAELC,gBAAgB,wDAIlB,yBAAKR,UAAU,SACb,uBACEO,MAAO,CACLd,MAAO,QACPC,SAAU,OACVe,WAAY,kBAGd,sDAGF,yBAAKT,UAAU,wBAAwBO,MAAOf,GAC3C,IACD,oCACS,GACNO,EAAMG,QAAQQ,IAFjB,KAIA,oCACS,GACNX,EAAMG,QAAQS,KAEjB,0CACe,GACZZ,EAAMG,QAAQU,WAEjB,0CACe,GACZb,EAAMG,QAAQW,kBChFlBC,G,MAAW,SAACf,GAAD,OACtB,yBAAKC,UAAU,aACZD,EAAMgB,MAAMC,KAAI,SAACd,GAAD,OAEf,kBAAC,EAAD,CAAMe,IAAKf,EAAQgB,GAAIhB,QAASA,UCHzBiB,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,6BAOI,2BACErB,UAAU,SACVsB,KAAK,SACLF,YAAaA,EACbG,SAAUF,OCwEHG,E,kDAjFb,aAAe,IAAD,8BACZ,gBASFC,kBAAoB,WAClB,EAAKC,eAXO,EAcdC,mBAAqB,SAACC,EAAWC,GAC3BA,EAAUC,WAAa,EAAKC,MAAMD,UACpC,EAAKJ,eAhBK,EAoBdA,YAAc,WACZM,MAAM,qDAAD,OACkD,EAAKD,MAAMD,WAE/DG,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAAClB,GAAD,OAAW,EAAKqB,SAAS,CAAErB,MAAOA,QAxB1C,EAAKgB,MAAQ,CACXhB,MAAO,GACPsB,YAAa,GACbP,SAAU,GANA,E,qDA8BJ,IAAD,SACwBQ,KAAKP,MAA5BhB,EADD,EACCA,MAAOsB,EADR,EACQA,YACTE,EAAgBxB,EAAMyB,QAAO,SAACzB,GAAD,OACjCA,EAAMV,KAAKoC,cAAcC,SAASL,EAAYI,kBAG1CX,EAAaQ,KAAKP,MAAlBD,SAkBN,OACE,yBAAK9B,UAAU,OACb,yBAAKA,UAAU,YACb,uBAAGA,UAAU,aAAb,wBAEA,kBAAC,EAAD,CACEoB,YAAY,kBACZC,aAAciB,KAAKjB,gBAGvB,kBAAC,EAAD,CAAUN,MAAOwB,IACjB,yBAAKvC,UAAU,YA3Bb8B,GAAY,EAEZ,4BACEa,QAAS,SAACC,GAAD,OACP,EAAKR,SAAS,CAAEN,SAAU,EAAKC,MAAMD,SAAW,MAGjD,IALH,OAMO,UAIT,EAiBE,wBAAI9B,UAAU,gBAAd,SAAoCsC,KAAKP,MAAMD,UAC/C,4BACEa,QAAS,SAACC,GAAD,OACP,EAAKR,SAAS,CAAEN,SAAU,EAAKC,MAAMD,SAAW,MAFpD,c,GArEQe,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.709327e9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.style.css\";\n\nconst pTagFontColor = {\n  color: \"black\",\n  fontSize: \"20px\",\n  display: \"flex\",\n  // background: \"#e7d3ce\",\n  background: \"-webkit-linear-gradient(45deg, #e7d3ce 0%, #596a72 100%)\",\n  // background: \"-o-linear-gradient(45deg, #cedce7 0%, #596a72 100%)\",\n  // background: \"linear-gradient(45deg, #cedce7 0%, #596a72 100%)\",\n  opacity: \".9\",\n};\n\nexport const Card = (props) => (\n  // <div className=\"card-container\">\n  //   <img\n  //     // src={`https://robohash.org/${props.brewery.id}?set=set4&size=180x180`}\n  //     // src={`https://images.punkapi.com/v2/${props.brewery.id.image_url}`}\n  //     // src={`https://images.punkapi.com/${props.brewery.id.image_url}`}\n  //     alt=\"\"\n  //   />\n  //   <img className=\"beer-img\" src={props.brewery.image_url} alt=\"\"/>\n  //   <p><strong>Beer: </strong>{props.brewery.name}</p>\n  //   <p><strong>Abv: </strong>{props.brewery.abv}%</p>\n  //   <p><strong>Tagline: </strong>{props.brewery.tagline}</p>\n  //   <p className=\"beer-card-description\"><strong>Description: </strong>{props.brewery.description}</p>\n  // </div>\n\n  // <div className=\"wrapper, card-container\">\n\n  <div className=\"cols\">\n    {/* ? ADD THIS TO THE DIV BELOW onTouchStart={this.classList.toggle('hover')} */}\n    <div className=\"col\">\n      <div className=\"container\">\n        <div\n          className=\"front\"\n          // style={{\n          //   // *using unsplash brewery images for card background\n          //   backgroundImage: `url(\"https://source.unsplash.com/750x450/?brewery\")`,\n          //   // backgroundImage: `url(\"https://placeimg.com/720/540/nature\")`,\n          // }}\n        >\n          <div className=\"inner\">\n            <img className=\"beer-img\" src={props.brewery.image_url} alt=\"\" />\n            <p>{props.brewery.name}</p>\n            <p>{props.brewery.tagline}</p>\n          </div>\n        </div>\n        <div\n          className=\"back\"\n          style={{\n            // *using unsplash brewery images for card background\n            backgroundImage: `url(\"https://source.unsplash.com/750x450/?brewery\")`,\n            // backgroundImage: `url(\"https://placeimg.com/720/540/nature\")`,\n          }}\n        >\n          <div className=\"inner\">\n            <p\n              style={{\n                color: \"black\",\n                fontSize: \"40px\",\n                fontFamily: \"Titillium Web\",\n              }}\n            >\n              <strong>Beer Description:</strong>\n            </p>\n\n            <div className=\"beer-card-description\" style={pTagFontColor}>\n              {\" \"}\n              <p>\n                Abv : {\"\"}\n                {props.brewery.abv}%\n              </p>\n              <p>\n                IBU : {\"\"}\n                {props.brewery.ibu}\n              </p>\n              <p>\n                Target OG : {\"\"}\n                {props.brewery.target_og}\n              </p>\n              <p>\n                Target FG : {\"\"}\n                {props.brewery.target_fg}\n              </p>\n              {/* {props.brewery.description} */}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  // </div>\n);\n","import React from \"react\";\nimport { Card } from \"../Card/card.component\";\nimport \"./card-list.style.css\";\n\nexport const CardList = (props) => (\n  <div className=\"card-list\">\n    {props.beers.map((brewery) => (\n      // <h4 key={brewery.id}>{brewery.name}</h4>\n      <Card key={brewery.id} brewery={brewery} />\n    ))}\n  </div>\n);\n","import React from \"react\";\n\n// import { InputGroup, InputGroupAddon, Button } from \"reactstrap\";\nimport \"./search-box.styles.css\";\n// import brewdogImg from \"./brewdog.png\"\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <div>\n    {/* <InputGroup>\n      <InputGroupAddon addonType=\"append\">\n        <Button color=\"secondary\">Search Beer</Button>\n      </InputGroupAddon>\n    </InputGroup> */}\n    {/* <img src={brewdogImg} alt=\"\"/> */}\n      <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    \n  </div>\n);\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\n\nimport { CardList } from \"./Components/CardList/card-list.Component\";\nimport { SearchBox } from \"./Components/search-box/search-box\";\n// import beerImg from \"./Assets/AppAssests/beerImg.jpg\"\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      beers: [],\n      searchField: \"\",\n      beerPage: 1,\n    };\n  }\n\n  componentDidMount = () => {\n    this.getBeerPage();\n  };\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (prevState.beerPage !== this.state.beerPage) {\n      this.getBeerPage();\n    }\n  };\n\n  getBeerPage = () => {\n    fetch(\n      `https://api.punkapi.com/v2/beers?per_page=10&page=${this.state.beerPage}`\n    )\n      .then((response) => {\n        return response.json();\n      })\n      .then((beers) => this.setState({ beers: beers }));\n  };\n\n  render() {\n    const { beers, searchField } = this.state;\n    const filteredBeers = beers.filter((beers) =>\n      beers.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    let { beerPage } = this.state;\n    const showBackbtn = () => {\n      if (beerPage >= 2) {\n        return (\n          <button\n            onClick={(e) =>\n              this.setState({ beerPage: this.state.beerPage - 1 })\n            }\n          >\n            {\" \"}\n            Back{\" \"}\n          </button>\n        );\n      } else {\n        return;\n      }\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"beer-app\">\n          <p className=\"app-title\"> Brewdog Beer Search</p>\n\n          <SearchBox\n            placeholder=\"Find Beer . . .\"\n            handleChange={this.handleChange}\n          />\n        </div>\n        <CardList beers={filteredBeers} />\n        <div className=\"pageBtns\">\n          {showBackbtn()}\n          <h1 className=\"current-page\">Page: {this.state.beerPage}</h1>\n          <button\n            onClick={(e) =>\n              this.setState({ beerPage: this.state.beerPage + 1 })\n            }\n          >\n            next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}